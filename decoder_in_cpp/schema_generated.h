// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct ClientList;
struct ClientListBuilder;

struct Person FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int16_t age() const {
    return GetField<int16_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  const flatbuffers::String *gender() const {
    return GetPointer<const flatbuffers::String *>(VT_GENDER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int16_t>(verifier, VT_AGE) &&
           VerifyField<float>(verifier, VT_WEIGHT) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(int16_t age) {
    fbb_.AddElement<int16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(flatbuffers::Offset<flatbuffers::String> gender) {
    fbb_.AddOffset(Person::VT_GENDER, gender);
  }
  explicit PersonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline flatbuffers::Offset<Person> CreatePerson(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int16_t age = 0,
    float weight = 0.0f,
    flatbuffers::Offset<flatbuffers::String> gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_gender(gender);
  builder_.add_weight(weight);
  builder_.add_name(name);
  builder_.add_age(age);
  return builder_.Finish();
}

inline flatbuffers::Offset<Person> CreatePersonDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int16_t age = 0,
    float weight = 0.0f,
    const char *gender = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  return CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPNAME = 4,
    VT_AVERAGE_AGE = 6,
    VT_AVERAGE_WEIGHT = 8,
    VT_NAMES = 10
  };
  const flatbuffers::String *groupname() const {
    return GetPointer<const flatbuffers::String *>(VT_GROUPNAME);
  }
  float average_age() const {
    return GetField<float>(VT_AVERAGE_AGE, 0.0f);
  }
  float average_weight() const {
    return GetField<float>(VT_AVERAGE_WEIGHT, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *names() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NAMES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUPNAME) &&
           verifier.VerifyString(groupname()) &&
           VerifyField<float>(verifier, VT_AVERAGE_AGE) &&
           VerifyField<float>(verifier, VT_AVERAGE_WEIGHT) &&
           VerifyOffset(verifier, VT_NAMES) &&
           verifier.VerifyVector(names()) &&
           verifier.VerifyVectorOfStrings(names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_groupname(flatbuffers::Offset<flatbuffers::String> groupname) {
    fbb_.AddOffset(Group::VT_GROUPNAME, groupname);
  }
  void add_average_age(float average_age) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_AGE, average_age, 0.0f);
  }
  void add_average_weight(float average_weight) {
    fbb_.AddElement<float>(Group::VT_AVERAGE_WEIGHT, average_weight, 0.0f);
  }
  void add_names(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names) {
    fbb_.AddOffset(Group::VT_NAMES, names);
  }
  explicit GroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline flatbuffers::Offset<Group> CreateGroup(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> groupname = 0,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_names(names);
  builder_.add_average_weight(average_weight);
  builder_.add_average_age(average_age);
  builder_.add_groupname(groupname);
  return builder_.Finish();
}

inline flatbuffers::Offset<Group> CreateGroupDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *groupname = nullptr,
    float average_age = 0.0f,
    float average_weight = 0.0f,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *names = nullptr) {
  auto groupname__ = groupname ? _fbb.CreateString(groupname) : 0;
  auto names__ = names ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*names) : 0;
  return CreateGroup(
      _fbb,
      groupname__,
      average_age,
      average_weight,
      names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERSON = 4,
    VT_GROUP = 6,
    VT_IS_PERSON = 8
  };
  const Person *person() const {
    return GetPointer<const Person *>(VT_PERSON);
  }
  const Group *group() const {
    return GetPointer<const Group *>(VT_GROUP);
  }
  bool is_person() const {
    return GetField<uint8_t>(VT_IS_PERSON, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERSON) &&
           verifier.VerifyTable(person()) &&
           VerifyOffset(verifier, VT_GROUP) &&
           verifier.VerifyTable(group()) &&
           VerifyField<uint8_t>(verifier, VT_IS_PERSON) &&
           verifier.EndTable();
  }
};

struct ClientBuilder {
  typedef Client Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_person(flatbuffers::Offset<Person> person) {
    fbb_.AddOffset(Client::VT_PERSON, person);
  }
  void add_group(flatbuffers::Offset<Group> group) {
    fbb_.AddOffset(Client::VT_GROUP, group);
  }
  void add_is_person(bool is_person) {
    fbb_.AddElement<uint8_t>(Client::VT_IS_PERSON, static_cast<uint8_t>(is_person), 0);
  }
  explicit ClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline flatbuffers::Offset<Client> CreateClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Person> person = 0,
    flatbuffers::Offset<Group> group = 0,
    bool is_person = false) {
  ClientBuilder builder_(_fbb);
  builder_.add_group(group);
  builder_.add_person(person);
  builder_.add_is_person(is_person);
  return builder_.Finish();
}

struct ClientList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ClientListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Client>> *clients() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Client>> *>(VT_CLIENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct ClientListBuilder {
  typedef ClientList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clients(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Client>>> clients) {
    fbb_.AddOffset(ClientList::VT_CLIENTS, clients);
  }
  explicit ClientListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ClientList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ClientList>(end);
    return o;
  }
};

inline flatbuffers::Offset<ClientList> CreateClientList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Client>>> clients = 0) {
  ClientListBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline flatbuffers::Offset<ClientList> CreateClientListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Client>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVector<flatbuffers::Offset<Client>>(*clients) : 0;
  return CreateClientList(
      _fbb,
      clients__);
}

inline const ClientList *GetClientList(const void *buf) {
  return flatbuffers::GetRoot<ClientList>(buf);
}

inline const ClientList *GetSizePrefixedClientList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ClientList>(buf);
}

inline bool VerifyClientListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ClientList>(nullptr);
}

inline bool VerifySizePrefixedClientListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ClientList>(nullptr);
}

inline void FinishClientListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ClientList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ClientList> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_SCHEMA_H_
